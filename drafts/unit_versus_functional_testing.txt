Unit Testing Versus Functional Testing Versus Automated Testing

I've been "officially" in the software industry for about 10 years now.  I
still consider myself an amateur.

Part of it is me, and my tendency to "self-plateau" at a certain level of
skill.  Another part of it is that fact that my previous company didn't
really follow what I would consider to be modern development practices and
so I developed what I would consider to be bad habits - or, at least, I did
not develop too many good habits.

My current company is miles better, but even they're a little uncomfortable
with modern tools and methodologies.  They are, however, at least willing to
explore them, so that's a plus in my book.

An example of a modern development practice would be "unit testing".  I had
a vague notion of what this was when I was hired at my current company but
it's taken a few years of marination for me to grasp certain fundamentals
(self-plateauing again).

First, I was a bit fuzzy as to the terminology.  For me, at the time, "unit
testing" was more or less synonomous with "automated testing".  I chalk this
up to the fact that the main automated testing framework for Java is called
"JUnit".  It gives the impression that a unit test and an automated test are
the same thing.

To be fair, the wikipedia article is a bit vague on topic.  The article on
[Unit Testing](http://en.wikipedia.org/wiki/Unit_testing) starts out like
this:
    
> In computer programming, unit testing is a method by which individual
> units of source code, sets of one or more computer program modules
> together with associated control data, usage procedures, and operating
> procedures, are tested to determine if they are fit for use.

It's an accurate, but not very useful definition.  But it does go on to say:

> Its implementation can vary from being very manual (pencil and paper) to
> being formalized as part of build automation.

So...unit testing is not the same as automated testing because unit testing
can be manual.  Fine.  That being said, the vast majority of unit testing
is, in fact, automated so perhaps we're being a bit pedantic.

A unit test tests a unit.  What is a unit?  I'm not 100% sure, but the
opinions seem to vary between "method" and "class".  At my company, at
least, the traditional "unit" is a method.  One test will generally test one
method.  You'll often see that one test putting the method through its
paces, setting things up, testing the output, then setting something else
up, and testing the output of that.

Another school of thought is that a "unit" is a specific feature of a
class.  The idea here is that if there are 3 different ways of calling a
method, you should have three different unit tests.  Each unit test tests
something very focussed and specific.

Ultimately, I think the difference between those two approches is relatively
minor in comparison with what I consider to be a much more interesting
question: should you perform white box testing or black box testing?
